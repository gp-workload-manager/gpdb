pgindent'ing Greenplum Code
============================
Currently, pgindent is run against GPDB before major releases (as does Postgres).

It has also run by some developers between releases to clean up code in certain
directories, such as `src/backend/access/appendonly` and `src/backend/cdb`:
https://github.com/greenplum-db/gpdb/pull/3384
https://github.com/greenplum-db/gpdb/pull/3400
https://github.com/greenplum-db/gpdb/pull/3423

Ideally, all GPDB code should be kept pgindent'ed consistently, but currently it
is not. The reason for this is that GPDB is composed of several types of code:
1. Code originating from Postgres 8.3
2. Code originating from Postgres 8.4
3. Code that was cherry-picked from a newer version of Postgres
4. Code that was purely written for GPDB
5. A Frankenstein-like mix of code
6. Other

To further complicate matters, pgindent formatting rules have changed between
Postgres releases and the current version of the pgindent binary in the
GPDB repository was actually cherry-picked from 9.1.

Because there are plans to merge commits from newer versions of Postgres into
GPDB, all code should be kept pgident'ed using the corresponding version of
pgindent, e.g. code originating from Postgres 8.3 should be pgindent'ed using
an 8.3 pgindent binary so that there are fewer merge conflicts when commits from
Postgres 8.4 are cherry-picked on top of it.
For example, `src/backend/main/main.c` is formatted with pgindent 8.3 rules
because it originated from Postgres 8.3.

Although there is no clear answer, pgindent'ing code is a good practice in
general if done understanding the above constraints.


How to Run pgindent on Greenplum code
=====================================

For the reasons mentioned above, the pgindent binaries have been removed from
Greenplum and the below practice is recommended instead.

1. Determine which version of Postgres the GPDB code you are pgindent'ing
originates from.
2. Download that version of the Postgres code.
3. Run pgindent by following the `src/tools/pgindent/README` of the downloaded
Postgres code, but use the `src/tools/pgindent/typedefs.list` provided with GPDB.

For example, running the latest version of the Postgres pgindent tool against
`src/backend/access/appendonly/aosegfiles.c` will produce no diffs because
that file is following the latest pgindent rules:
```bash
~/workspace/postgres/src/tools/pgindent/pgindent ~/workspace/gpdb/src/tools/pgindent/typedefs.list ~workspace/gpdb/src/backend/access/appendonly/aosegfiles.c
```

However, running it against `src/backend/main/main.c` will produce diffs:
```bash
~/workspace/postgres/src/tools/pgindent/pgindent ~/workspace/gpdb/src/tools/pgindent/typedefs.list ~workspace/gpdb/src/backend/main/main.c
```


Updating typedefs.list
======================
If any new data structures were added to the GPDB code, it is recommended to
update typedefs.list and make a commit to the GPDB repo.
